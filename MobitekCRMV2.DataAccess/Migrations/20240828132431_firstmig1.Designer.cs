// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobitekCRMV2.DataAccess.Context;

#nullable disable

namespace MobitekCRMV2.DataAccess.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    [Migration("20240828132431_firstmig1")]
    partial class firstmig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KeywordPromotion", b =>
                {
                    b.Property<string>("KeywordsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PromotionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KeywordsId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("KeywordPromotion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.BackLink", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Anchor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Da")
                        .HasColumnType("int");

                    b.Property<string>("DomainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LandingPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManualCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsSiteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Pa")
                        .HasColumnType("int");

                    b.Property<string>("SelectDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFrom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("NewsSiteId");

                    b.ToTable("BackLinks");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.ContentBudget", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ContentBudgets");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyOfficialWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRepresentativeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRepresentativeId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Domain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Keyword", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("H1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<string>("KeywordName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeywordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("page")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId")
                        .IsUnique()
                        .HasFilter("[KeywordId] IS NOT NULL");

                    b.ToTable("KeywordInfos");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordResponse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeywordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerpURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.ToTable("KeywordResponses");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordValue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeywordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TargetCheckType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.ToTable("KeywordValues");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.LogMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogMessages");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.NewsSite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AllTraffic")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DAScore")
                        .HasColumnType("int");

                    b.Property<int>("DRScore")
                        .HasColumnType("int");

                    b.Property<string>("EditorMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleNews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LinkedDomains")
                        .HasColumnType("int");

                    b.Property<int>("MozDA")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicTraffic")
                        .HasColumnType("int");

                    b.Property<int>("PAScore")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PromotionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpamScore")
                        .HasColumnType("int");

                    b.Property<int>("TotalBacklinks")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsSites");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Platform", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthoritativeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Budget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Contract")
                        .HasColumnType("int");

                    b.Property<int>("ContractKeywordCount")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerTypeUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DevelopmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpertId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExportPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacketInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTypeUserId");

                    b.HasIndex("DomainId")
                        .IsUnique()
                        .HasFilter("[DomainId] IS NOT NULL");

                    b.HasIndex("ExpertId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoogleIndex")
                        .HasColumnType("int");

                    b.Property<string>("LandingPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PromotionURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.SmPlatform", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SmPlatforms");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.TemplateItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TodoGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TodoRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TodoGroupId");

                    b.ToTable("TemplateItem");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Todo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TemplateItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TodoGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TemplateItemId");

                    b.HasIndex("TodoGroupId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.TodoGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TodoRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TodoGroups");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Kdv")
                        .HasColumnType("bit");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Tc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("KeywordPromotion", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobitekCRMV2.Entity.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobitekCRMV2.Entity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.BackLink", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Domain", "Domain")
                        .WithMany("BackLinks")
                        .HasForeignKey("DomainId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.NewsSite", "NewsSite")
                        .WithMany("BackLinks")
                        .HasForeignKey("NewsSiteId");

                    b.Navigation("Domain");

                    b.Navigation("NewsSite");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.ContentBudget", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Project", "Project")
                        .WithMany("ContentBudgets")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Customer", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "CustomerRepresentative")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRepresentativeId");

                    b.Navigation("CustomerRepresentative");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Keyword", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Project", "Project")
                        .WithMany("Keywords")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordInfo", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Keyword", "Keyword")
                        .WithOne("KeywordInfo")
                        .HasForeignKey("MobitekCRMV2.Entity.Entities.KeywordInfo", "KeywordId");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordResponse", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Keyword", "Keyword")
                        .WithMany("KeywordResponses")
                        .HasForeignKey("KeywordId");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.KeywordValue", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Keyword", "Keyword")
                        .WithMany("KeywordValues")
                        .HasForeignKey("KeywordId");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.NewsSite", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Promotion", "Promotion")
                        .WithMany("NewsSites")
                        .HasForeignKey("PromotionId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "User")
                        .WithMany("NewsSites")
                        .HasForeignKey("UserId");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Project", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "CustomerTypeUser")
                        .WithMany("CustomerProjects")
                        .HasForeignKey("CustomerTypeUserId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.Domain", "Domain")
                        .WithOne("Project")
                        .HasForeignKey("MobitekCRMV2.Entity.Entities.Project", "DomainId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "Expert")
                        .WithMany("ExpertProjects")
                        .HasForeignKey("ExpertId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.Platform", "Platform")
                        .WithMany("Projects")
                        .HasForeignKey("PlatformId");

                    b.Navigation("Customer");

                    b.Navigation("CustomerTypeUser");

                    b.Navigation("Domain");

                    b.Navigation("Expert");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Promotion", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.Project", "Project")
                        .WithMany("Promotions")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.SmPlatform", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.Project", "Project")
                        .WithMany("SmPlatforms")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.TemplateItem", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.TodoGroup", "TodoGroup")
                        .WithMany("TemplateItems")
                        .HasForeignKey("TodoGroupId");

                    b.Navigation("TodoGroup");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Todo", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "Owner")
                        .WithMany("Todo")
                        .HasForeignKey("OwnerId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.Project", "Project")
                        .WithMany("Todo")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.TemplateItem", "TemplateItem")
                        .WithMany()
                        .HasForeignKey("TemplateItemId");

                    b.HasOne("MobitekCRMV2.Entity.Entities.TodoGroup", "TodoGroup")
                        .WithMany("Todo")
                        .HasForeignKey("TodoGroupId");

                    b.Navigation("Owner");

                    b.Navigation("Project");

                    b.Navigation("TemplateItem");

                    b.Navigation("TodoGroup");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.UserInfo", b =>
                {
                    b.HasOne("MobitekCRMV2.Entity.Entities.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("MobitekCRMV2.Entity.Entities.UserInfo", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Customer", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Domain", b =>
                {
                    b.Navigation("BackLinks");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Keyword", b =>
                {
                    b.Navigation("KeywordInfo");

                    b.Navigation("KeywordResponses");

                    b.Navigation("KeywordValues");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.NewsSite", b =>
                {
                    b.Navigation("BackLinks");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Platform", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Project", b =>
                {
                    b.Navigation("ContentBudgets");

                    b.Navigation("Keywords");

                    b.Navigation("Promotions");

                    b.Navigation("SmPlatforms");

                    b.Navigation("Todo");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.Promotion", b =>
                {
                    b.Navigation("NewsSites");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.TodoGroup", b =>
                {
                    b.Navigation("TemplateItems");

                    b.Navigation("Todo");
                });

            modelBuilder.Entity("MobitekCRMV2.Entity.Entities.User", b =>
                {
                    b.Navigation("CustomerProjects");

                    b.Navigation("Customers");

                    b.Navigation("ExpertProjects");

                    b.Navigation("NewsSites");

                    b.Navigation("Todo");

                    b.Navigation("UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
